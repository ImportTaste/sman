aben:
  do: exec
  desc: run env.sh
  command: . /global/common/software/polar/local/bin/abenv.sh <<flags>>
abpn:
  do: exec
  desc: run path.sh
  command: . $SCRATCH/POLARBEAR/AnalysisBackend-Extras-ickc/bin/path.sh

# set PATH
dautil:
  do: exec
  desc: lazy install dautil
  command: export PATH="$PATH:$SCRATCH/POLARBEAR/dautil-py/bin:$SCRATCH/POLARBEAR/dautil-sh/bin" && export PYTHONPATH="$PYTHONPATH:$SCRATCH/POLARBEAR/dautil-py"
pbbin:
  do: exec
  desc: lazy install everything related to AnalysisBackend
  command: export PATH="$PATH:$SCRATCH/POLARBEAR/AnalysisBackend-Extras-ickc/bin:$SCRATCH/POLARBEAR/dautil-py/bin:$SCRATCH/POLARBEAR/dautil-sh/bin:$PBCOMMON/AnalysisBackend/ab2/bin" && export PYTHONPATH="$PYTHONPATH:$SCRATCH/POLARBEAR/dautil-py:$SCRATCH/POLARBEAR/AnalysisBackend-Extras-ickc"
ab2bin:
  do: exec
  desc: lazy install ab2's bin
  command: if [[ -n $NERSC_HOST ]]; then export PATH="$PATH:/global/common/software/polar/AnalysisBackend/ab2/bin"; else export PATH="$PATH:$SCRATCH/POLARBEAR/ab2/bin"; fi

# install
ab2nersc:
  do: exec
  desc: install ab2 from scratch to common, assume running on NERSC and aben loaded.
  command: rsync -avmz --delete --stats --cvs-exclude --exclude='.DS_Store' --exclude .git/ --exclude .gitignore $SCRATCH/POLARBEAR/ab2/ $PBCOMMON/AnalysisBackend/ab2/ && cd $PBCOMMON/AnalysisBackend/ab2 && make && cd -

# precoess_field_whwp.py related
ab:jobid:
  do: exec
  desc: Get job ID from the stdout outputs. Assume using process_field_whwp.py with file pattern 'job_*-stdout*'.
  command: find . -iname 'job_*-stdout*' | sed -E 's/^\.\/job_([0-9]+)-stdout_.*$/\1/g' | sort -un
sed:time:
  do: exec
  desc: Replace the time function from the output of process_field_whwp.py to use the time command with output.
  command: sed -i 's/^time \(.\+\) -o \([^ ]\+\) /\/usr\/bin\/time -v -o \2\/time.txt \1 -o \2 /g' <<filename>>
# mapmaking
map:stat:real:
  do: exec
  desc: Count the number of files with name realmap.hdf5.
  command: find . -iname 'realmap.hdf5' | wc -l
map:stat:sim:
  do: exec
  desc: Count the number of files with pattern sim(0-9){3}.hdf5.
  command: for num in $(seq -w 000 <<nreal(007)>>); do filename="sim$num.hdf5"; printf "%s\t" "$filename"; find . -iname "$filename" | wc -l; done
rm:hdf5:
  do: exec
  desc: delete corrupted hdf5 files
  command: find . -name '*.hdf5' -exec h5delete.py -p 64 {} +
# coadd
coadd:stat:
  do: exec
  desc: Count no. of coadded files.
  command: find . -path '*/coadd/*' -name '*.hdf5' | wc -l
coadd:stat:obs:
  do: exec
  desc: Count no. of coadded observations
  command: find -path '*/coadd/*' -name '*.hdf5' -exec dirname {} + | sort -u | wc -l
coadd:rm:hdf5:
  do: exec
  desc: delete corrupted hdf5 files under coadd
  command: find . -path '*/coadd/*' -name '*.hdf5' -exec h5delete.py -p 64 {} +
git:pull:ab:
  do: exec
  desc: pull branch cleanup jcdelensing neil_unblinding yuyang khcheung from both bolo and github.
  command: for branch in cleanup jcdelensing neil_unblinding yuyang khcheung; do git checkout $branch && git pull origin $branch && git push github $branch; done
git:push:ab:
  do: exec
  desc: push branch cleanup jcdelensing neil_unblinding yuyang khcheung to both bolo and github.
  command: for branch in cleanup jcdelensing neil_unblinding yuyang khcheung; do git checkout $branch && git push origin $branch && git push github $branch; done
git:push:pa:
  do: exec
  desc: push branch master and python3 to both bolo and github.
  command: for branch in python3 master; do git checkout $branch && git push origin $branch && git push github $branch; done
# null2full
null2full:
  do: exec
  desc: find all level 1 dir start with null_* and rename them as full_*
  command: find -mindepth 1 -maxdepth 1 -type d -name 'null_*' | sed 's/^\.\/null_\(.*\)$/mv null_\1 full_\1/g' | xargs -i -n1 -P1 bash -c '$0' {}
full2null:
  do: exec
  desc: find all level 1 dir start with full_* and rename them as null_*
  command: find -mindepth 1 -maxdepth 1 -type d -name 'full_*' | sed 's/^\.\/full_\(.*\)$/mv full_\1 null_\1/g' | xargs -i -n1 -P1 bash -c '$0' {}
install:makefile:
  do: exec
  desc: make symlink of makefiles from abx to current directory
  command: for i in common.in makefile null.in full.in nreal_mapsplits.in; do ln -s $SCRATCH/POLARBEAR/AnalysisBackend-Extras-ickc/makefile/$i .; done
